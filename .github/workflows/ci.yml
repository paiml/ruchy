name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Format check
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  # Clippy linting
  lint:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Test on multiple platforms
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose --workspace --all-features
      - name: Run doc tests
        run: cargo test --doc --workspace

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Generate coverage
        run: cargo tarpaulin --verbose --workspace --timeout 120 --out Xml --exclude-files "*/tests/*" --exclude-files "*/examples/*"
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./cobertura.xml
          fail_ci_if_error: false
      - name: Check coverage threshold
        run: |
          COVERAGE=$(cargo tarpaulin --print-summary --workspace --timeout 120 --exclude-files "*/tests/*" --exclude-files "*/examples/*" 2>/dev/null | tail -n 1 | grep -oP '\d+\.\d+%' | sed 's/%//')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage is below 80% threshold"
            exit 1
          fi

  # Run examples
  examples:
    name: Examples
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Run parser demo
        run: cargo run --example parser_demo
      - name: Run transpiler demo
        run: cargo run --example transpiler_demo
      - name: Test Ruchy scripts
        run: |
          cargo run --package ruchy-cli --bin ruchy -- transpile examples/fibonacci.ruchy
          cargo run --package ruchy-cli --bin ruchy -- transpile examples/marco_polo.ruchy

  # Benchmarks
  bench:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Run benchmarks
        run: cargo bench --workspace

  # PMAT quality gates (if available)
  quality:
    name: Quality Gates
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail CI if PMAT isn't available
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install PMAT
        run: |
          cargo install pmat || true
      - name: Run quality checks
        run: |
          pmat quality-gate || true
          pmat analyze --metrics complexity src/ || true

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: rustsec/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Generate docs
        run: cargo doc --no-deps --workspace --all-features
      - name: Check docs
        run: cargo doc --no-deps --workspace --all-features --document-private-items