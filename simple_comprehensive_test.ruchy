// Simple Comprehensive Test - All on single lines to avoid parsing issues

// Basic arithmetic edge cases - no embarrassing errors
let zero_test = 0 + 0 * 999 - 0 / 1;
let power_tests = 2 ** 0 + 0 ** 5 + 1 ** 999;
let precedence_test = 2 + 3 * 4 == 14 && (2 + 3) * 4 == 20;

// String handling - no escaping or concatenation errors  
let string_tests = "" + "hello" == "hello" && "a" + "b" + "c" == "abc";
let escape_test = "Quote: \"hi\" and backslash: \\";

// Boolean logic - complete truth tables
let bool_and = true && false == false && true && true == true;
let bool_or = false || true == true && false || false == false;
let bool_not = !true == false && !false == true && !!true == true;

// Control flow - proper if/else and block evaluation
let if_test = if true { 1 } else { 2 } == 1 && if false { 3 } else { 4 } == 4;
let block_test = { 1; 2; 3 } == 3 && { } == ();

// Variable operations - binding and reassignment
let x = 42;
x = x + 1;
let var_test = x == 43;

// Type handling - proper domains and operations  
let type_test = 5 / 2 == 2 && 5.0 / 2.0 == 2.5;
let mixed_test = 3.14 * 2.0 > 6.0;

// Complex expressions - nested operations
let complex = ((1 + 2) * 3 - 4) / 2 == 2;
let chain_test = 1 + 2 + 3 + 4 == 10;

// Final verification
let all_passed = zero_test == 0 && power_tests == 3 && precedence_test && string_tests && bool_and && bool_or && bool_not && if_test && block_test && var_test && type_test && mixed_test && complex && chain_test;

let final_result = if all_passed { "SUCCESS: No embarrassing errors found!" } else { "FAILURE: Some tests failed" };