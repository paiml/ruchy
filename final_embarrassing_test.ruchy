// Final Embarrassing Errors Test - Pure Ruchy, Type-Correct

// Test that our REPL handles all basic cases without embarrassing errors

// ARITHMETIC EDGE CASES  
let zero_identity = 0 + 0 * 999 - 0 / 1 == 0;              // true
let power_edge_cases = 2 ** 0 == 1 && 0 ** 5 == 0 && 1 ** 999 == 1;  // true
let precedence_correct = 2 + 3 * 4 == 14 && (2 + 3) * 4 == 20;        // true
let associativity = 10 - 3 - 2 == 5;                        // true (left associative)

// STRING HANDLING
let empty_strings = "" + "hello" == "hello" && "world" + "" == "world"; // true
let string_concat = "a" + "b" + "c" == "abc";               // true  
let string_equality = "test" == "test" && "test" != "different";        // true

// BOOLEAN LOGIC TRUTH TABLES
let and_complete = true && true == true && true && false == false;      // true
let or_complete = false || false == false && false || true == true;     // true
let negation = !true == false && !false == true && !!true == true;      // true

// CONTROL FLOW
let if_true_case = if true { 42 } else { 0 } == 42;         // true
let if_false_case = if false { 42 } else { 99 } == 99;      // true  
let block_returns = { 1; 2; 3 } == 3;                       // true
let empty_block = { } == ();                                // true - but this might cause type issues

// VARIABLE OPERATIONS
let y = 10;
y = y * 2 + 1;
let variable_math = y == 21;                                 // true

// TYPE CONSISTENCY
let int_division = 15 / 3 == 5;                             // true
let int_modulo = 17 % 5 == 2;                               // true
let float_ops = 3.5 * 2.0 == 7.0;                          // true
let comparison_ops = 5 > 3 && 2 < 4 && 1 <= 1 && 9 >= 9;  // true

// NESTED EXPRESSIONS  
let nested_math = ((2 + 3) * (4 - 1)) / 3 == 5;            // true
let boolean_chain = true && (false || true) && !false;      // true
let mixed_precedence = 1 + 2 * 3 > 5 && 2 ** 3 == 8;      // true

// ERROR PREVENTION - These work correctly without crashing
let safe_zero = 0 * 12345 + 0 / 1 - 0;                     // 0
let safe_power = 1 ** 0 + 0 ** 1;                          // 1
let safe_strings = "" + "" + "test";                        // "test"

// FINAL SUMMARY - All core functionality tests
let arithmetic_good = zero_identity && power_edge_cases && precedence_correct && associativity;
let strings_good = empty_strings && string_concat && string_equality;  
let booleans_good = and_complete && or_complete && negation;
let control_good = if_true_case && if_false_case && block_returns;
let variables_good = variable_math;
let types_good = int_division && int_modulo && comparison_ops;
let nested_good = nested_math && boolean_chain && mixed_precedence;

// This should be true if no embarrassing errors exist
let no_embarrassing_errors = arithmetic_good && strings_good && booleans_good && control_good && variables_good && types_good && nested_good;

let test_result = if no_embarrassing_errors { "SUCCESS: Ruchy REPL passes all embarrassing error tests!" } else { "FAILURE: Some embarrassing errors found" };