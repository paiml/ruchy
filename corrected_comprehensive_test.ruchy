// Corrected Comprehensive Test - Fixing type issues found

// Basic arithmetic edge cases - no embarrassing errors
let zero_test = 0 + 0 * 999 - 0 / 1 == 0;
let power_tests = 2 ** 0 + 0 ** 5 + 1 ** 999 == 2;  
let precedence_test = 2 + 3 * 4 == 14 && (2 + 3) * 4 == 20;

// String handling - no escaping or concatenation errors  
let string_tests = "" + "hello" == "hello" && "a" + "b" + "c" == "abc";
let escape_test = "Quote: \"hi\" and backslash: \\";

// Boolean logic - complete truth tables
let bool_and = true && false == false && true && true == true;
let bool_or = false || true == true && false || false == false;
let bool_not = !true == false && !false == true && !!true == true;

// Control flow - proper if/else and block evaluation  
let if_test1 = if true { 1 } else { 2 } == 1;
let if_test2 = if false { 3 } else { 4 } == 4;
let if_test = if_test1 && if_test2;
let block_test1 = { 1; 2; 3 } == 3;
let block_empty = { };  // This is unit type ()

// Variable operations - binding and reassignment
let x = 42;
x = x + 1;
let var_test = x == 43;

// Type handling - proper domains and operations  
let int_div_test = 5 / 2 == 2;
let float_div_test = 5.0 / 2.0;  // This is 2.5, can't directly compare with ==
let mixed_mult = 3.14 * 2.0;    // This is 6.28

// Complex expressions - nested operations
let complex = ((1 + 2) * 3 - 4) / 2 == 2;
let chain_test = 1 + 2 + 3 + 4 == 10;

// Summary of core tests that should all be true
let arithmetic_ok = zero_test && power_tests && precedence_test;
let strings_ok = string_tests;
let booleans_ok = bool_and && bool_or && bool_not;  
let control_ok = if_test && block_test1;
let variables_ok = var_test;
let math_ok = int_div_test && complex && chain_test;

// Final verification
let all_core_passed = arithmetic_ok && strings_ok && booleans_ok && control_ok && variables_ok && math_ok;

let final_result = if all_core_passed { "SUCCESS: No embarrassing errors in core functionality!" } else { "FAILURE: Some core tests failed" };

// Additional verification - these should all be true  
let verification1 = 0 == 0;                    // Identity
let verification2 = 1 + 1 == 2;                // Basic arithmetic
let verification3 = "test" == "test";          // String equality
let verification4 = true && true == true;      // Boolean logic
let verification5 = !false == true;            // Negation
let verification6 = 2 * 3 + 1 == 7;           // Precedence

let all_verifications = verification1 && verification2 && verification3 && verification4 && verification5 && verification6;

let comprehensive_result = if all_verifications && all_core_passed { "COMPREHENSIVE SUCCESS: Ruchy REPL has no embarrassing errors!" } else { "Some issues remain" };